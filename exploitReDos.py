import typer
from lxml import html
from requests import Session
import requests

from rich.console import Console
import re
from typing import Callable

app = typer.Typer()
console = Console()
session = Session()


def login(server,timeout_in_seconds):

    response = session.post(f"{server}/login", data={
        "username": "user",
        "password": "a"
    },timeout=timeout_in_seconds)
    console.log(f"Login status code: {response}")
    console.print(f"{'â”€' * 100}")
    return response.history



def check_down_web_server(server,timeout_in_seconds):
    console.print(f"We check for a maximum of {timeout_in_seconds} seconds...", style="blink bold white on green")
    response = session.get(f"{server}/",timeout=10)

@app.callback()
def main(
        server: str = typer.Option(
            ...,
            prompt=True,
            envvar="SERVER",
        ),
        timeout_in_seconds: int = typer.Option(
            ...,
            prompt=True,
            envvar="timeout_in_seconds",
        )

):
    with console.status("Login..."):
        login(server=server,timeout_in_seconds=timeout_in_seconds)
    with console.status("Checking server availability..."):
        check_down_web_server(server=server,timeout_in_seconds=timeout_in_seconds)


def run():
    try:
        typer.run(main)
    except Exception as e:
        console.print(f"[red bold]Error:[/red bold] {e}")


if __name__ == "__main__":
    run()



####### 2 Mode:
# 1. function Loging server with simple ReDos, try an input ever bigger to make the server unavailable
## 1.1 print time_response minor at the timeout
## 1.2 check server availability after 
# 2. function Register, server with regex injection, try an evil regex and a crafted input
## 2.2 check server availability after 

